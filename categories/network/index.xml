<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network on VENISHJOE.NET</title>
    <link>/categories/network/index.xml</link>
    <description>Recent content in Network on VENISHJOE.NET</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>venish@venishjoe.net (Venish Joe Clarence)</managingEditor>
    <webMaster>venish@venishjoe.net (Venish Joe Clarence)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <atom:link href="/categories/network/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Signing Java Objects for Secure Transfer</title>
      <link>/post/signing-java-objects-for-secure-transfer/</link>
      <pubDate>Tue, 13 Oct 2009 22:45:00 +0000</pubDate>
      <author>venish@venishjoe.net (Venish Joe Clarence)</author>
      <guid>/post/signing-java-objects-for-secure-transfer/</guid>
      <description>&lt;p&gt;In distributed J2EE applications or in any application where you need to transfer Java objects to another system then there is always a security risk where the
object can be intercepted which can result in data theft/loss. Especially in Serialization, (where the object is a physical file in the native file system)
when the serialized Java objects are sent through the network, whoever knows the type of the object can always read it.&lt;/p&gt;

&lt;p&gt;In this article, we will build two simple applications, one which generates the object, the keys (public &amp;amp; private) and signs the object with the private key.
Other application which verifies the signed object in other end over the network or another application in the same machine. Both these apps can run independently in different machines.
For signing the object we will be using Public-Key cryptography. This is one of the most widely used standards to sign data along with DSA &amp;amp; SHA1PRNG
(cryptographically strong pseudo-random number generator (PRNG)).
Public-Key cryptography is a asymmetric key algorithm, where the key used to encrypt a message is not the same as the key used to decrypt it.&lt;/p&gt;

&lt;p&gt;This is the class diagram of the applications which we will be building. This article will be divided into two parts, the first part we will sign the object (serialized)
and in the second part, we will verify it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/media/images/00005/signing-java-objects-class-layout.png#floatcenter&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;sign-the-java-object&#34;&gt;Sign the Java Object&lt;/h5&gt;

&lt;p&gt;First of all we need a class which will generate a public and private key.
We will create a class named SecurityUtil which will generate those based on DSA (we can use RSA or any other algorithm as long as its available)
and we will generate a cryptographically strong pseudo-random number generator (PRNG) which can be clubbed along with DSA (SHA1PRNG).
The strength of the key will be 1024.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;protected KeyPair generateKey () throws Exception {
    KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(&#34;DSA&#34;);
    SecureRandom secureRandom = SecureRandom.getInstance(&#34;SHA1PRNG&#34;);
    keyPairGen.initialize(1024,secureRandom);
    KeyPair keyPair = keyPairGen.generateKeyPair();
    return keyPair;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we will create a class named EmployeeValueObject which is nothing but a POJO with a HashMap getter/setter.
This will be the object which we will be transferring over the network/application. Since we serialize the object before transferring, this class should implement Serializable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class EmployeeValueObject implements Serializable {
    HashMap employeeSalary = new HashMap();
    public void setSalary (HashMap employeeSalary){
        this.employeeSalary = employeeSalary;
    }

    public HashMap getSalary () {
        return employeeSalary;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have all the supporting classes which we need and let’s start building the main application.
Let’s call this class EmployeeDetails and this will create an object for the POJO which we created in our previous step and populate with some data.
In addition to that, we will sign the POJO object and then serialize to a file.
In this example we will be also serializing the public key to transfer to the other end.
Note: In production implementations, both these objects shouldn’t be sent at the same time. The application at the other end should already have the public key)&lt;/p&gt;

&lt;p&gt;Let’s create the POJO and populate with some data in the HashMap.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;EmployeeValueObject employeeVO = new EmployeeValueObject();
employeeVO.setSalary(populateData());

private static HashMap populateData (){
    HashMap employeeSalary = new HashMap ();
    employeeSalary.put(&#34;3&#34;, &#34;Johns, Galvin D. --&gt; $18,000&#34;);
    employeeSalary.put(&#34;4&#34;, &#34;Weber, Murphy I. --&gt; $5,000&#34;);

    return employeeSalary;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s generate the public and private keys from SecutityUtil and sign the POJO which we created in the above step.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;KeyPair keyPair = new SecurityUtil().generateKey();
PrivateKey privateKey = keyPair.getPrivate();
PublicKey publicKey = keyPair.getPublic();

Signature digitalSignature = Signature.getInstance(privateKey.getAlgorithm());
SignedObject digitalSignedObj =
    new SignedObject(employeeVO, privateKey, digitalSignature);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now digitalSignedObj is a digitally signed data with the private key which we generated. Now let’s serialize this object for the secure transfer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;ileOutputStream serializedFileOutput = new FileOutputStream(&#34;employee.ser&#34;);
ObjectOutputStream serializedObjOutput = new ObjectOutputStream(serializedFileOutput);
serializedObjOutput.writeObject(digitalSignedObj);
serializedObjOutput.close();
serializedFileOutput.close();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will also serialize the public key so that for this example we can send both of them to another machine to verify.
Note: In production implementations, both these objects shouldn’t be sent at the same time. The application at the other end should already have the public key)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;serializedFileOutput = new FileOutputStream(&#34;publickey.ser&#34;);
serializedObjOutput = new ObjectOutputStream(serializedFileOutput);
serializedObjOutput.writeObject(publicKey);
serializedObjOutput.close();
serializedFileOutput.close();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will complete the creation of application one. When you run this application, it will create two new files in the same directory.
employee.ser – which is the signed and serialized POJO (Salary details) &amp;amp; publickey.ser – public key to verify the POJO.
Now using the appropriate protocol send these files to the other application (remote or local) and let’s start building the verification part.&lt;/p&gt;

&lt;h5 id=&#34;verification-amp-de-serializing-the-java-object&#34;&gt;Verification &amp;amp; De-Serializing the Java Object&lt;/h5&gt;

&lt;p&gt;As a start we have the files employee.ser &amp;amp; publickey.ser. Let’s start building up the class to verify and de-serialize these files.
Let’s name this class DecryptEmployee. The following code should de-serialize the objects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;FileInputStream serializedPublicKeyIn = new FileInputStream(&#34;publicKey.ser&#34;);
ObjectInputStream serializedPublicKey = new ObjectInputStream(serializedPublicKeyIn);
PublicKey publicKey = (PublicKey) serializedPublicKey.readObject();

FileInputStream serializedEmployeeIn = new FileInputStream(&#34;employee.ser&#34;);
ObjectInputStream serializedEmployee = new ObjectInputStream(serializedEmployeeIn);
SignedObject digitalSignedObj = (SignedObject) serializedEmployee.readObject();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the public key was not signed, publicKey variable will be readable.
But the employee POJO was signed, so we are reading the object as a SignedObject. Let’s move forward and verify this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;Signature digitalSignature = Signature.getInstance(publicKey.getAlgorithm());
boolean decryptFlag = digitalSignedObj.verify(publicKey, digitalSignature);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The decryptFlag contains the status of the verification.
If the public key is incorrect or if the object was tampered, then this will return false and we won’t be able to verify the object.
If its true then everything looks good and we can successfully verify the POJO and print the values from HashMap.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;if(decryptFlag) {
    EmployeeValueObject employeeVO = (EmployeeValueObject) digitalSignedObj.getObject();
    HashMap employeeSalary = (HashMap) employeeVO.getSalary();
    Collection collHashMap = employeeSalary.values();
    Iterator collectionIterator = collHashMap.iterator();
    while (collectionIterator.hasNext()) {
        System.out.println(collectionIterator.next());
    }
} else {
    System.out.println (&#34;Decryption Failed. Please check the Keys.&#34;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run this application, we will get an output similar to below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/media/images/00005/signing-java-objects-output.png#floatcenter&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This can be used in any sensitive application to make sure that the objects which are transferred over the network are safe.&lt;/p&gt;

&lt;p&gt;UPDATE: SignedObject signs the object, but it doesn&amp;rsquo;t encrypt it. So if you need encryption, you can use the Cipher class in Java.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Simple Proxy Server in Java</title>
      <link>/post/simple-proxy-server-in-java/</link>
      <pubDate>Sun, 27 Sep 2009 00:55:00 +0000</pubDate>
      <author>venish@venishjoe.net (Venish Joe Clarence)</author>
      <guid>/post/simple-proxy-server-in-java/</guid>
      <description>&lt;p&gt;In this post, I am going to show how a simple Proxy server can be designed in Java which will provide the core functionalities of a proxy.
From &lt;a href=&#34;http://en.wikipedia.org/wiki/Proxy_server&#34;&gt;Wikipedia&lt;/a&gt;, &amp;ldquo;a proxy server is a server (a computer system or an application program)
that acts as an intermediary for requests from clients seeking resources from other servers.&amp;ldquo;The proxy server generally has some resources,
or has access to some resources and when it receives request from a client, it access the appropriate resource and sends back the response.&lt;/p&gt;

&lt;p&gt;So it serves two purposes, giving access to a resource which the client do not have access and it hides the real client who needs the resource.
The second part is used for the anonymous browsing in Internet using anonymous proxy servers.
Although this may not be as “anonymous” as it sounds because the proxy server which you connect to can maintain logs about the clients who are connecting to the server,
and also the bigger risk being the data theft. Since the “anonymous” proxy server has access to all the request you send,
there is risk of that data being exposed unless there is some kind of encryption in place between the client and the proxy server.&lt;/p&gt;

&lt;p&gt;If you are in a network, and the machine which you are using don’t have access to Internet but another machine in the same subnet has access to Internet, then you can run this
proxy application in the machine which has Internet access and in your local machine, you can configure your web browser to use the IP and Port number of the machine
where the proxy is running in the LAN/Network settings. Once done, you should be able to access the Internet. This is one of the practical use for proxy servers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/media/images/00003/simple-proxy-server-architecture.png#floatcenter&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The proxy server which we will be designing will be a simple HTTP proxy which gets web requests based on HTTP protocol and sends back response in the same protocol.
We will start by declaring some constants.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int proxyServerPortNumber = 7879;
int webServerPortNumber = 80;
String webServerIpAddress = &#34;192.168.1.1&#34;;
final int PROXY_SERVER_TIME_OUT = 5000;
final int SOCKET_TIME_OUT = 2000;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;proxyServerPortNumber defines the port where the proxy server will be listening. You can use any port number which is not used by other process / standard port.&lt;/p&gt;

&lt;p&gt;webServerIpAddress and webServerPortNumber defines the IP/port where the server can access the resources. Since we are designing this to access websites over http,
the port is defined as 80 and the IP should be a machine which has Internet access (can be localhost too)&lt;/p&gt;

&lt;p&gt;PROXY_SERVER_TIME_OUT and SOCKET_TIME_OUT are standard parameters defined for Server and network socket timeout. You can adjust this based on your needs.&lt;/p&gt;

&lt;p&gt;Now we need to start the Java class to bind to the port number defined and to run in a infinite loop or as a daemon thread, so that it keeps on listening for requests.
In this example, we will be using the infinite loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;try {
    serverSocket = new ServerSocket(proxyServerPortNumber);
} catch(Exception exc) {
        System.exit(0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the process will be listening in the port 7879 for requests from clients. Now, let’s open an infinte loop and make a connection to the resource, in our case the web server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;socketProxy = new Socket(InetAddress.getByName(webServerIpAddress),webServerPortNumber);
socketProxy.setSoTimeout(PROXY_SERVER_TIME_OUT);
socket = serverSocket.accept();
socket.setSoTimeout(SOCKET_TIME_OUT);
inputStream = socket.getInputStream();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The request from the client will be received by Input Stream, so once we are connected, we will be sending this Input Stream which is nothing but a normal HTTP REQ object
to the server which has the resource or as in our case the machine connected to Internet. The server will respond with the response which will be a HTTP RES over the
Java Output Stream. We will be forwarding this output stream to the client which will be rendered in the application which the client requested in.
That is if the request was sent through command line, the entire HTML will be printed, if its a browser the page will be rendered.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;try {
    while( (intCounter = in.read()) != -1) {
        if(intCounter == -1) break;
        if(!bREQ)
            bREQ = true;
        pOutputStream.write(intCounter);
        if(byteCheckFl &amp;gt; 0) {
            break;
        }
        if(intCounter == 13 &amp;amp;&amp;amp; intPrevCounter == 10)
            byteCheckFl++;
        intPrevCounter = intCounter;
    }
} catch(Exception e) {
    if(!bREQ) {
        continue;
    }
}

pOutputStream.flush();
pIutputStream = socketProxy.getInputStream();
outputStream = socket.getOutputStream();
try {
    while( (intCounter = pIutputStream.read()) != -1) {
        outputStream.write(intCounter);
    }
} catch(Exception e) {
}
outputStream.flush();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure to close all the opened sockets and connections once the response is sent. Since this whole code is running in an infinite loop,
the server will keep on waiting for the requests and sending the responses back. This is a crude implementation of the concept and there is
room for a lot more improvements (like supporting SSL), but this should serve as a foundation to make the proxy a robust one.&lt;/p&gt;

&lt;p&gt;We can easily make this Java class as a Win32 service, so that it will always run in background and starts along with the OS.
That will need some work with JNI. I will explain that in a later post.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>