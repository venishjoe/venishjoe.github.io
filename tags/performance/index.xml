<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Performance on VENISHJOE.NET</title>
    <link>https://venishjoe.net/tags/performance/index.xml</link>
    <description>Recent content in Performance on VENISHJOE.NET</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>venish@venishjoe.net (Venish Joe Clarence)</managingEditor>
    <webMaster>venish@venishjoe.net (Venish Joe Clarence)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <atom:link href="https://venishjoe.net/tags/performance/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Java String Concatenation and Performance</title>
      <link>https://venishjoe.net/post/java-string-concatenation-and-performance/</link>
      <pubDate>Sun, 08 Nov 2009 18:01:00 +0000</pubDate>
      <author>venish@venishjoe.net (Venish Joe Clarence)</author>
      <guid>https://venishjoe.net/post/java-string-concatenation-and-performance/</guid>
      <description>&lt;p&gt;The quick and dirty way to concatenate strings in Java is to use the concatenation operator (+).
This will yield a reasonable performance if you need to combine two or three strings (fixed-size).
But if you want to concatenate n strings in a loop, the performance degrades in multiples of n.
Given that String is immutable, for large number of string concatenation operations, using (+) will give us a worst performance.
But how bad ? How StringBuffer, StringBuilder or String.concat() performs if we put them on a performance test ?.
This article will try to answer those questions.&lt;/p&gt;

&lt;p&gt;We will be using &lt;a href=&#34;https://github.com/perf4j/perf4j&#34;&gt;Perf4J&lt;/a&gt; to calculate the performance, since this library will give us aggregated performance statistics
like mean, minimum, maximum, standard deviation over a set time span. In the code, we will concatenate a string (*)
repeatedly 50,000 times and this iteration will be performed 21 times so that we can get a good standard deviation.
The following methods will be used to concatenate strings.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Concatenation Operator (+)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://java.sun.com/j2se/1.4.2/docs/api/java/lang/String.html#concat%28java.lang.String%29&#34;&gt;String concat method&lt;/a&gt; - concat(String str)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://java.sun.com/j2se/1.4.2/docs/api/java/lang/StringBuffer.html#append%28java.lang.String%29&#34;&gt;StringBuffer append method&lt;/a&gt; - append(String str)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://java.sun.com/j2se/1.5.0/docs/api/java/lang/StringBuilder.html#append%28java.lang.String%29&#34;&gt;StringBuilder append method&lt;/a&gt; - append(String str)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally we will look at the byte code to see how each of these operations perform. Let’s start building the class.
Note that each of the block in the code should be wrapped around the Perf4J library to calculate the performance in each iteration.
Let’s define the outer and inner iterations first.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;private static final int OUTER_ITERATION=20;
private static final int INNER_ITERATION=50000;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s implement each of the four methods mentioned in the article.
Nothing fancy here, plain implementations of (+), String.concat(), StringBuffer.append() &amp;amp; StringBuilder.append().&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;String addTestStr = &#34;&#34;;
String concatTestStr = &#34;&#34;;
StringBuffer concatTestSb = null;
StringBuilder concatTestSbu = null;

for (int outerIndex=0;outerIndex&amp;lt;=OUTER_ITERATION;outerIndex++) {
    StopWatch stopWatch = new LoggingStopWatch(&#34;StringAddConcat&#34;);
    addTestStr = &#34;&#34;;
    for (int innerIndex=0;innerIndex&amp;lt;=INNER_ITERATION;innerIndex++)
        addTestStr += &#34;*&#34;;
    stopWatch.stop();
}

for (int outerIndex=0;outerIndex&amp;lt;=OUTER_ITERATION;outerIndex++) {
    StopWatch stopWatch = new LoggingStopWatch(&#34;StringConcat&#34;);
    concatTestStr = &#34;&#34;;
    for (int innerIndex=0;innerIndex&amp;lt;=INNER_ITERATION;innerIndex++)
        concatTestStr = concatTestStr.concat(&#34;*&#34;);
    stopWatch.stop();
}

for (int outerIndex=0;outerIndex&amp;lt;=OUTER_ITERATION;outerIndex++) {
    StopWatch stopWatch = new LoggingStopWatch(&#34;StringBufferConcat&#34;);
    concatTestSb = new StringBuffer();
    for (int innerIndex=0;innerIndex&amp;lt;=INNER_ITERATION;innerIndex++)
        concatTestSb.append(&#34;*&#34;);
    stopWatch.stop();
}

for (int outerIndex=0;outerIndex&amp;lt;=OUTER_ITERATION;outerIndex++) {
    StopWatch stopWatch = new LoggingStopWatch(&#34;StringBuilderConcat&#34;);
    concatTestSbu = new StringBuilder();
    for (int innerIndex=0;innerIndex&amp;lt;=INNER_ITERATION;innerIndex++)
        concatTestSbu.append(&#34;*&#34;);
    stopWatch.stop();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s run this program and generate the performance metrics. I ran this program in a 64-bit OS (Windows 7), 32-bit JVM (7-ea), Core 2 Quad CPU (2.00 GHz) with 4 GB RAM.&lt;/p&gt;

&lt;p&gt;The output from the 21 iterations of the program is plotted below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://venishjoe.net/media/images/00009/java-string-concatenation-and-performance.png#floatcenter&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Well, the results are pretty conclusive and as expected. One interesting point to notice is how better String.concat performs.
We all know String is immutable, then how the performance of concat is better. To answer the question we should look at the byte code.
I have included the whole byte code in the download package, but let’s have a look at the below snippet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bytecode&#34;&gt;45: new #7; //class java/lang/StringBuilder
48: dup
49: invokespecial #8; //Method java/lang/StringBuilder.&#34;&amp;lt;init&amp;gt;&#34;:()V
52: aload_1
53: invokevirtual #9; //Method java/lang/StringBuilder.append:
    (Ljava/lang/String;)Ljava/lang/StringBuilder;
56: ldc #10; //String *
58: invokevirtual #9; //Method java/lang/StringBuilder.append:
    (Ljava/lang/String;)Ljava/lang/StringBuilder;
61: invokevirtual #11; //Method java/lang/StringBuilder.toString:()
    Ljava/lang/String;
64: astore_1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the byte code for String.concat(), and its clear from this that the String.concat is using StringBuilder for concatenation and the performance should be as good as String Builder.
But given that the source object being used is String, we do have some performance loss in String.concat.&lt;/p&gt;

&lt;p&gt;So for the simple operations we should use String.concat compared to (+), if we don’t want to create a new instance of StringBuffer/Builder.
But for huge operations, we shouldn’t be using the concat operator, as seen in the performance results it will bring down the application to its knees and spike up the CPU utilization.
To have the best performance, the clear choice is StringBuilder as long as you do not need thread-safety or synchronization.&lt;/p&gt;

&lt;p&gt;Full source of this application is available in &lt;a href=&#34;https://github.com/venishjoe/blog-code/tree/master/string-concatenation-perf&#34;&gt;my github&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>